{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-10-22-data-driven-tests","webpackCompilationHash":"a2d2ac01274abb8d2fde","result":{"data":{"markdownRemark":{"html":"<p>I think a lot about testing and testing patterns. Testing complex code can sometimes seem like an exercise in futility. It takes hours setting up different frameworks and tools, and hours again creating dummies and mocks and fakes. And at the end, your test code is often so dense it is tough to read and maintain. This is part of the reason I like thinking about testing -- because it is challenging to do well. Today however, I'm not going to tackle all that complexity. I want to talk about my favorite kind of tests -- easy and obvious ones!</p>\n<h2>Testing simple, pure functions.</h2>\n<p>First let me define what I mean by a pure function. This is a functional programming (and mathmatical!) concept. Thankfully its not as confusing as Monads and Functors.</p>\n<p>A \"<strong>pure function</strong>\" is just a function which, for the same input, will always return the same output. See <a href=\"https://en.wikipedia.org/wiki/Pure_function\">the Wikipedia page on \"Pure Function\"</a> for more info.</p>\n<p>I <strong>love</strong> testing pure functions because it is <strong>easy</strong>! You pass it some input, and test that the output is what you expect. There is no mocking of external processes, no complex environment or precondition setup. Just clean, beautiful tests!.</p>\n<p>Consider this contrived example testing an <code class=\"language-text\">add</code> function (using a JS test framework like <em>mocha</em>):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add function'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">returns 0 when passed 0, 0</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">returns 0 when passed -1, 1</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">returns 2 when passed 1, 1</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">returns 5 when passed 2, 3</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">returns Infinity when passed Infinity, Infinity</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Output:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"txt\"><pre class=\"language-txt\"><code class=\"language-txt\">add function\n    ✓ returns 0 when passed 0, 0\n    ✓ returns 0 when passed -1, 1\n    ✓ returns 2 when passed 1, 1\n    ✓ returns 5 when passed 2, 3\n    ✓ returns Infinity when passed Infinity, Infinity</code></pre></div>\n<p>See? That was nice and easy. But its not \"<strong>data-driven</strong>\".</p>\n<h2>Driving with Data!</h2>\n<p>By \"data driven\", I mean <em>driving</em> the test cases with data by supplying a data structure with the inputs and expected outputs. This is essentially the 2 pieces involved in testing <em>any</em> pure function, so it makes sense to DRY up our testing approach with this in mind.</p>\n<p>See the following <em>refactor</em> of the above test code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add function'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> testCases <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span> input<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> input<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> input<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> input<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> input<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">:</span> <span class=\"token number\">Infinity</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n\n    testCases<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> input<span class=\"token punctuation\">,</span> expected <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">returns </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>expected<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> when passed </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>input<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>input<span class=\"token punctuation\">)</span>\n            assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This is a test pattern that I have found incredibly useful. Its perhaps a little more dense and confusing than the initial sample, but see how easy it is to add additional cases! It would literally be just a single line addition!</p>\n<p>This is just the basic pattern, but you can probably imagine lots of different variations it could take. One thing I often do is add a 3rd property, <code class=\"language-text\">description</code>, to the testCase objects, which becomes the first argument to <code class=\"language-text\">it</code>.</p>\n<aside><code><pre>// TODO: add link to GH Gist with different variations on this pattern</pre></code></aside>\n<p>This pattern is something that is not specific to JavaScript mocha tests. </p>\n<h2>It gets better!</h2>\n<p>Some test frameworks provide a mechanism to supply \"data tables\" to data-drive the tests in a more intuitive and readable way!</p>\n<p>The first time I encountered it was in the excellent <em>Groovy</em> test-framework <strong>Spock</strong> (🖖). For my money, this is even more beautiful than my above JavaScript example because it allows you to create a <em>data-table</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Add</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Specification</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> <span class=\"token string gstring\">\"add function\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> expected<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token spock-block\">expect:</span>\n        Math<span class=\"token operator\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> expected\n\n        <span class=\"token spock-block\">where:</span>\n        a <span class=\"token operator\">|</span> b <span class=\"token operator\">|</span> expected\n        <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">3</span> <span class=\"token operator\">|</span> <span class=\"token number\">4</span>\n        <span class=\"token number\">7</span> <span class=\"token operator\">|</span> <span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">11</span>\n        <span class=\"token number\">0</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Even if you don't know Groovy, I'll bet that you intuitively understand what the above example is doing.</p>\n<p>The groovy/spock example is pretty similar to Cucumber tests with the Gherkin language. Unfortunately, I'm not quite as familiar with that syntax, and don't have a test-env set up with it currently.</p>\n<aside><code><pre>// TODO: add Cucumber data-table test example</pre></code></aside>","frontmatter":{"date":"October 22, 2019","path":"/2019-10-22-data-driven-tests","title":"Data Driven Tests"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}